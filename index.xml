<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Trollshuo&#39;s BLOG</title>
    <link>https://trollshuo.com/</link>
    <description>Recent content on Trollshuo&#39;s BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 31 Aug 2021 11:22:38 +0800</lastBuildDate><atom:link href="https://trollshuo.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>微服务架构最佳实践</title>
      <link>https://trollshuo.com/post/microservice_architecture_best_practices/</link>
      <pubDate>Tue, 31 Aug 2021 11:22:38 +0800</pubDate>
      
      <guid>https://trollshuo.com/post/microservice_architecture_best_practices/</guid>
      <description>&lt;p&gt;微服务架构的转换并没有想象中那么容易，大部分技术领导者往往会低估项目的复杂性，从而犯下灾难性的错误。&lt;/p&gt;
&lt;p&gt;在将单体系统转换为微服务之前，或者从零开始架构微服务，往往需要仔细思考清楚即将发生的技术和&lt;a href=&#34;https://codingsans.com/blog/making-microservices-work-developer-experience-matters&#34;&gt;组织挑战&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;因此，我们对来自5个不同国家（从以色列到美国）的技术领导者进行了13次采访，总结并归纳了这些案例到这篇文章中。&lt;/p&gt;
&lt;p&gt;这篇文章适合于拥有以下想法的读者：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从单体系统转换到微服务架构。&lt;/li&gt;
&lt;li&gt;从富有经验的技术领导者那里收集见解。&lt;/li&gt;
&lt;li&gt;了解微服务的缺点和优点。&lt;/li&gt;
&lt;li&gt;避免灾难性的错误。&lt;/li&gt;
&lt;li&gt;在微服务方面做出更好的技术决策。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>大话ES6</title>
      <link>https://trollshuo.com/post/ES6_Succinctly/</link>
      <pubDate>Sat, 30 Jan 2021 21:47:39 +0800</pubDate>
      
      <guid>https://trollshuo.com/post/ES6_Succinctly/</guid>
      <description>&lt;p&gt;ES6、ES2015或者说Harmony给我们带来了很多有趣的特性，本文将对它所提供的这些新特性进行深入剖析。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java static关键字完整指南</title>
      <link>https://trollshuo.com/post/Java_static_keyword/</link>
      <pubDate>Wed, 06 Jan 2021 20:19:48 +0800</pubDate>
      
      <guid>https://trollshuo.com/post/Java_static_keyword/</guid>
      <description>&lt;p&gt;最近整理了一部分资料，尝试通过探索static关键字的历史作为开端，接着阐述并结合它的自身特点来对实际运用场景作一些总结。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>接口实现类的前缀与后缀最佳实践</title>
      <link>https://trollshuo.com/post/implementations_of_interfaces_prefixes/</link>
      <pubDate>Wed, 30 Dec 2020 17:57:13 +0800</pubDate>
      
      <guid>https://trollshuo.com/post/implementations_of_interfaces_prefixes/</guid>
      <description>&lt;p&gt;最近我在Twitter上问了一个问题，关于如何使用一些通用的类名前缀/后缀来搭配一个接口，看看是否有最佳实践。本篇文章是基于Java的，其他语言有不同的编码 &amp;ldquo;风格&amp;rdquo;，自然会产生不同的命名模式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java通用方法命名最佳实践</title>
      <link>https://trollshuo.com/post/common_java_method_names/</link>
      <pubDate>Tue, 22 Dec 2020 18:20:59 +0800</pubDate>
      
      <guid>https://trollshuo.com/post/common_java_method_names/</guid>
      <description>&lt;p&gt;在讨论了&lt;a href=&#34;http://blog.joda.org/2011/08/implementations-of-interfaces-prefixes.html&#34;&gt;一些&lt;/a&gt;&lt;a href=&#34;http://blog.joda.org/2011/08/more-java-prefixs-and-suffixes.html&#34;&gt;常见&lt;/a&gt;的类名前缀和后缀之后，本文想讨论一些方法命名的惯例。同样，这一切都与Java有关&amp;mdash;其他语言则完全不同。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://trollshuo.com/about/</link>
      <pubDate>Tue, 22 Dec 2020 11:55:33 +0800</pubDate>
      
      <guid>https://trollshuo.com/about/</guid>
      <description>Geek is the new sexy!</description>
    </item>
    
  </channel>
</rss>
